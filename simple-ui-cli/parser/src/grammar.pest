
// Silents
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ ANY) }
typescript_type = _{ (":" ~ ASCII_ALPHANUMERIC+)? }
variable_token = _{ "const" | "let" | "var" }
semicolon = _{ ";"? }
comma = _{ ","? }
escaped_quote = _{ "\"" | "'" | "`" }
arrow = _{ "=>" }

number = { ASCII_DIGIT+ }
string = {escaped_quote ~ ASCII_ALPHANUMERIC* ~ escaped_quote }
value = { ASCII_ALPHANUMERIC+ }

// Imports
import_component = { ASCII_ALPHA+ }
import_package = { (ASCII_ALPHANUMERIC | "-" | "_" )+  }
import_exp = { "import" ~ "{" ~ (import_component ~ comma)* ~ "}" ~ "from" ~ escaped_quote ~ import_package ~ escaped_quote ~ semicolon}



// Functions
function_param = { value }
anonymous_function = { "(" ~ (function_param ~ typescript_type ~ comma)* ~ ")" ~ arrow ~ "{" ~ expression*? ~ return_exp? ~ "}" ~ semicolon  }
function_call = { value ~ "(" ~  ((function_param ~ typescript_type ~ comma) | expression )* ~")"}


// Variables
variable_name = { ASCII_ALPHANUMERIC+ }
variable_value = {function_call | anonymous_function| string | ASCII_ALPHANUMERIC+ }
variable_exp = { variable_token ~ variable_name ~ typescript_type ~ "=" ~ expression }

return_values = {(expression | "(" ~ expression ~ ")"  ) }
return_exp = { "return" ~ return_values }


// JSX
jsx_component_name = { ASCII_ALPHA+ }
jsx_prop_name = { ASCII_ALPHA* }
jsx_prop = _{ jsx_prop_name ~ "=" ~ jsx_prop_value}
jsx_prop_value = { ("{" ~ (number | string | anonymous_function) ~ "}" | string)  }
jsx_exp_children = { "<" ~ jsx_component_name? ~ jsx_prop? ~ ">" ~ expression* ~ "</" ~ jsx_component_name? ~ ">" }


// Generics
expression = _{(import_exp | jsx_exp_children | variable_exp | variable_value | string | number) ~ semicolon}

statement = _{expression } 

// Entire file
jsx_file = _{ SOI ~ statement*? ~ EOI }